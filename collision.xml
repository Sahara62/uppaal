<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock gc;
int dir03,dir30,dir12,dir21;//go straight
int dir01,dir13,dir32,dir20;//turn left
int dir02,dir31,dir10,dir23;//turn right
int count;//number of car
//int way[4];
int cross[4];
int Left(int set)
{
    if(set == 0){
        return 1;
    }else if(set == 3){
        return 2;
    }else if(set == 1){
        return 3;
    }else if(set == 2){
        return 0;
    }else{
        return 4;
    }
}
int Right(int set){
    if(set == 3){
        return 1;
    }else if(set == 0){
        return 2;
    }else if(set == 2){
        return 3;
    }else if(set == 1){
        return 0;
    }else{
        return 4;
    }
}

</declaration>
	<template>
		<name>AV</name>
		<parameter>int &amp;dir, const int &amp;start, const int &amp;goal</parameter>
		<declaration>clock time;
bool Collision(int start,int goal){
    if(cross[Left(start)]&gt;=1 &amp;&amp; cross[Right(start)]&gt;=1){return false;}
    if(cross[start]&gt;=1 &amp;&amp; cross[goal]&gt;=1 &amp;&amp; cross[Left(start)]==0 &amp;&amp; cross[Right(start)]==0){return true;}
    else if(cross[start]==0 &amp;&amp; cross[goal]==0){return true;}
    else{return false;}
}

/*
bool Collision(dir,dir1,dir2){
    if(cross[dir1]==0 &amp;&amp; cross[dir2]==0){return true;}
    else if(dir &gt;= 1 &amp;&amp; cross[dir1]==1 &amp;&amp; cross[dir2]==1)
}*/</declaration>
		<location id="id0" x="-476" y="-552">
			<name x="-486" y="-586">passing</name>
			<label kind="invariant" x="-501" y="-544">time&lt;5</label>
		</location>
		<location id="id1" x="-697" y="-552">
			<name x="-707" y="-586">before</name>
			<label kind="invariant" x="-705" y="-535">time&lt;8</label>
		</location>
		<location id="id2" x="-986" y="-552">
			<name x="-996" y="-586">inite</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-442" y="-569">time&gt;=2</label>
			<label kind="assignment" x="-450" y="-544">cross[start]--,cross[goal]--,dir--,time:=0</label>
			<nail x="-382" y="-552"/>
			<nail x="-382" y="-450"/>
			<nail x="-986" y="-450"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-629" y="-586">time&gt;=5</label>
			<label kind="assignment" x="-679" y="-552">time:=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-944" y="-578">Collision(start,goal)==true</label>
			<label kind="assignment" x="-943" y="-552">cross[start]++,cross[goal]++,
dir++,time:=0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
ns = AV(dir03,0,3);//straight
we = AV(dir21,2,1);//straight
/*
ne = AV(dir01,0,1);//left
ws = AV(dir23,2,3);//right
*/
sn = AV(dir30,3,0);//straight
ew = AV(dir12,1,2);//straight
/*
sw = AV(dir32,3,2);//left
en = AV(dir10,1,0);//right
*/
sn2 = AV(dir30,3,0);//straight
ew2 = AV(dir12,1,2);//straight
/*sw2 = AV(dir32,3,2);
en2 = AV(dir10,1,0);*/

// List one or more processes to be composed into a system.
system ns,we
/*,ne,ws*/
,sn,ew
/*,sw,en*/
,sn2,ew2
/*,sw2,en2*/;
    </system>
	<queries>
		<query>
			<formula>A[] not (sw.passing and ws.passing and ne.passing)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not(sn.passing &amp;&amp; ew.passing)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (gc==49 and ns.final and we.final and ne.final and ws.final and sn.final and ew.final and sw.final and en.final)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] (gc&lt;49 imply not (ns.final and we.final and ne.final and ws.final and sn.final and ew.final and sw.final and en.final and sn2.final and ew2.final and sw2.final and en2.final))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt; (gc==49 and ns.final and we.final and ne.final and ws.final and sn.final and ew.final and sw.final and en.final and sn2.final and ew2.final and sw2.final and en2.final)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not deadlock
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] (gc&lt;18 imply not (ns.final and we.final and sn.final and ew.final and sn2.final and ew2.final))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>E&lt;&gt;(gc==18 and (ns.final and we.final and sn.final and ew.final and sn2.final and ew2.final))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>A[] not(we.passing and en.passing)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
